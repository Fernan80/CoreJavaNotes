//The purpose of this file is pretty much taking notes from the pdf file of core java
//this is also shared between to PCs 

1)float's and double's are pretty much the same thing. double's just tend to have
twice the precision compared to floats (15 decimal places to 6-7 decimal places). Suffixes are introduced here. Such as 
3.14f for floats and 3.14d for double (precision).

2) NaN means not a number
3) keyword public is an access modifier. Meaning it can be accessed by other forms
of the program.
4)EVERYTHING in the java program must live inside a class. 
5)Standard naming convention is Uppercase first word. Example: FirstApp
6)When compiling a java file for the first time it creates a bytecode of the class with the class extension
7)object.method(parameter). Example; System.out.println("Yo");
8)There are ONLY METHODS in java. There are not functions. C has only functions. So this is the major differance for me when it comes python
and Java.
9)Even if the method has no parameters it must still have parantheses to close it. Example:
    System.out.println();
10)methods println() and print() are the same except println() creates a new line.

11) Arguments: Generally using multiple parameters are called arguments.
12) Float numbers will always be considered Double because floats need a f suffix
    example: float name = 10.2342F
13) Its recomended not to use char types only when manuplating UTF-16 Code
13) You can declared multiple variables in Java like this: int j,k; /*Both are integers*/ But is not recomened as it is much easier to read .
14) Some programmers prefer to place an 'a' in front of a variable. So type then a+variable. Example: Box aBox;

15) final is a sytax that denotes a constant in java. Meaning it will retain its value once and for all and will not change.
    example: 
    public class Constants 
    {
        public static void main(String[] args)
        {
            double paperHeight = 11
            double paperWidth = 8.5;
            final double CM_PER_INCH = 2.54;
            double paperWidth size in centimeters: "
                + paperWidth * CM_PER_INCH + " by " + paperHeight * CM_PER_INCH);

            //final double CM_PER_INCH; is used as the conastant 

or 

    public class Constants2
    {
        public static final double CM_PER_INCH = 2.54; /*constants can be placed in classes called class constants*/
        public static void main(String[] args)
        {
            double paperWidth = 8.5;
            double paperHeight = 11;
            double paperWidth size in centimeters: "
                + paperWidth * CM_PER_INCH + " by " + paperHeight * CM_PER_INCH);
        }
    }
        //public static final double CM_PER_INCH; is used as the constant
16) Remember that the class constant is outside of the method environment so it can be use for various other methods in this class  
/* ------------------------------------------------------------------------------------------------*/


17) For strings: 
Escape Sequence->   Name->          Unicode->            
    \b              Backspace       \u0008
    \t              Tab             \u0009
    \n              linefeed        \u000a
    \r              carriage return \u000d 
    \"              Double Quote    \u0022
    \'              Single Quote    \u0027 
    \\              Backslash       \u005c
18) CONVERTING JAVA FILES TO CLASSES TO EXECUTABLE JAR FILES IN TERMINAL:
        javac -d ../Classes *.java
                                                       //Create a txt file called 'manifest' with the Main-Class defined
        Main-Class: WhateverMaineClassIs               //Main-Class: Test
        jar -cvmf manifest.txt WhateverNameYouWantOnYourJarFile.jar *.class //Hence why he called it manifest, its being called
19)strictfp stands for Strict Floating points: Usually placed on a method or all its methods
to keep it strictly on floating computation.
        Example:     public static strictfp void main(String[] args)


////////MATH


20) You avoid Math Prefix by add a static import: 
            import static java.lang.Math.*;
        example:
            System.out.println(
        instead of the basic method such as:
            double y = Math.Sqrt(PI);
            System.out.println("The Square root of \u03C0 is " + y);
21) 
    double x = 9.997;
    int nx = (int) x;// This will print 9 and cut off of the fractional part

if you want to round to its actual number you need to add a function:

    double x = 9.997;
    int nx = (int) Math.round(x); //rounds to 10

22) Remember that converting types have limits. Byte range is from -128 to 127. 
If calling a byte(300) you will get 44 instead because its past it limit.

23) import statics are a way to not apply the function to the Code. For example if we were able to
 import static java.System.*; we wouldn't have to type in System everytime.
    out.println("Hello");
    //////
    import static java.lang.Math.*;

23-b) Its important to understand that Math.sqrt() method is not an object. println() is a method but is attached to
 System.out thus is a object. Math.sqrt() isn't attached so it counts as a static method. 
 Math.sqrt() = class
 Math. = class 
 sqrt() = method
 System.out. = object
 
 24) x += 4; is the same thing such as x = x + 4;


 Stopped at page 51





